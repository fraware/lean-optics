name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fraware/lean-optics

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Lean 4
        uses: leanprover/lean4-action@v1
        with:
          lean_version: 4.8.0

      - name: Cache Lake dependencies
        uses: actions/cache@v3
        with:
          path: .lake/packages
          key: lake-packages-${{ hashFiles('lakefile.lean') }}
          restore-keys: |
            lake-packages-

      - name: Install dependencies
        run: lake build

      - name: Run tests
        run: make test

      - name: Run benchmarks
        run: make bench

      - name: Generate documentation
        run: make docs

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Test Docker image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest help
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest version
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest info

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, docker-build, docker-test]
    if: github.event_name == 'release'

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release Notes
        run: |
          echo "## Lean Optics Release ${{ github.event.release.tag_name }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Docker Image" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo "Add to your \`lakefile.lean\`:" >> release_notes.md
          echo "\`\`\`lean" >> release_notes.md
          echo "require lean-optics from git" >> release_notes.md
          echo "  \"https://github.com/fraware/lean-optics.git\" @ \"${{ github.event.release.tag_name }}\"" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Update Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: |
            release_notes.md
